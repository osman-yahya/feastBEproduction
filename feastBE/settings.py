"""
Django settings for feastBE project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv
load_dotenv() 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    #2sg new addeds : 

    'rest_framework_gis',  # Coğrafi sorgular için
    'corsheaders',
    'rest_framework',
    'users',
    'restaurants',
    'rest_framework_simplejwt',
    'django.contrib.gis',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', #2sg new added
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.backend.JWTCookieMiddleware", #2sg new added

]

ROOT_URLCONF = "feastBE.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]



WSGI_APPLICATION = "feastBE.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
import dj_database_url

db_from_env = dj_database_url.config(conn_max_age=600)
db_from_env["ENGINE"] = "django.contrib.gis.db.backends.postgis"

DATABASES = {
    "default": db_from_env
}

""" DATABASES = {
    "default": {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': 'db.xnejeakudvmvjhkbbxlu.supabase.co',
        'PORT': '5432',
    }
} """
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


#3sgb ------------    NEW ADDEDS : 


AUTH_USER_MODEL = 'users.User' # to set user model

FRONTEND_URL = 'https://feast.tr' 

#* AWS parameters : 

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')  # .env dosyasından alır
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')  # .env dosyasından alır
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')  # .env dosyasından alır
AWS_S3_REGION_NAME = 'eu-central-1'  # S3 bucket'ın bölgesi
AWS_S3_SIGNATURE_VERSION = 's3v4'  # S3'ün imza versiyonu
AWS_S3_CUSTOM_DOMAIN = 'http://feast-user-media.s3-website.eu-central-1.amazonaws.com'  # S3 URL'si

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


#*CORS Headers paremeters :
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# When at production activate below: 
"""
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React Geliştirme Ortamı
    "https://timesheetplus.netlify.app/",  # Yayındaki domainin
]
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True  # HTTPS kullanıyorsan True olmalı
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True  # HTTPS zorunlu

CSRF_COOKIE_HTTPONLY = False  # React'ın cookie'ye erişimi için
SESSION_COOKIE_HTTPONLY = True

"""
#* GDAL parameters : 

GDAL_LIBRARY_PATH = os.path.join(os.environ['CONDA_PREFIX'], 'Library', 'bin', 'gdal.dll')
GEOS_LIBRARY_PATH = os.path.join(os.environ['CONDA_PREFIX'], 'Library', 'bin', 'geos_c.dll')

#* Rest Framework parameters : 

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  
    ],
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # default backend
    'users.backend.EmailBackend',  # email ile giriş için özel backend
]

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=60),  # Access token süresi
    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),  # Refresh token süresi
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.getenv("JWT_SIGNKEY"),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_COOKIE': 'access_token',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

#* admin panel nasa map api : 
NASA_API_KEY = os.getenv('NASA_API_KEY')

#* amazon ses mail service :
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'email-smtp.eu-central-1.amazonaws.com'  # AWS SES SMTP server adresi
EMAIL_PORT = 587  # AWS SES SMTP portu
EMAIL_USE_TLS = True  # TLS kullan
EMAIL_HOST_USER = os.getenv("SES_USERNAME")  # SES üzerinden aldığınız SMTP kullanıcı adı
EMAIL_HOST_PASSWORD = os.getenv("SES_PASSWORD") # SES üzerinden aldığınız SMTP şifre
DEFAULT_FROM_EMAIL = 'mutfak@feast.tr'  # Gönderen e-posta adresiniz

PASSWORD_RESET_URL = f'{FRONTEND_URL}/reset-password'  # React route for password reset
